#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::datatype::float


#@public
function bashlets::glue::tcl::bash2tcl::convert_scalar()
{
    local x

    $BASHLETS_NAMESPACE float validate "$1" && {
        x="$1"
    } || {
        x="\"$1\""
    }

    echo "$x"
}

#@public
function bashlets::glue::tcl::bash2tcl::convert_list()
{
    local list

    for x in "$@"
    do
        $BASHLETS_NAMESPACE float validate "$x" && {
            [ -n "$list" ] && list="$list $x" || list="$x"
        } || {
            [ -n "$list" ] && list="$list \"$x\"" || list="\"$x\""
        }
    done

    echo "{$list}"
}

#@public
function bashlets::glue::tcl::bash2tcl::get_text()
{
    local f="$1"
    local tcl_text

    case "$f" in 
        exec-command)
            tcl_text='
                package require Tcl 8.5

                proc execCommand {args} {

                    # see http://www.tcl.tk/man/tcl8.4/TclCmd/exec.htm

                    # TODO add auto_execok
                    # TODO compatibility with Tcl 8.4 and lower (without {*})
                    if {[catch {exec {*}$args} results]} {
                        if {[lindex $::errorCode 0] eq "CHILDSTATUS"} {
                            # error condition
                            # TODO $::errorInfo
                            return [expr [lindex $::errorCode 2]]
                        } else {
                            # some kind of unexpected failure
                            return 127
                        }
                    } else {
                        return 0
                    }
                }
            '
            ;;
        *)
            # TODO error!
            ;;
    esac

    cat <<< "$tcl_text"
}


#@public
function bashlets::glue::tcl::bash2tcl::exec_command()
{
    local tcl_text

    tcl_text="
        $(bashlets::tcl::bash2tcl::get::text exec-command)

        exit [execCommand $@]
    "

    tclsh <<< "$tcl_text"
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh

#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets rdbms::oracle::query
source bashlets rdbms::oracle::database
source bashlets rdbms::oracle::datetime
source bashlets util::datatype::tsinterval

#@public
function bashlets::rdbms::oracle::awr::get_snap_id_begin_by_unixts()
{
    local unixts_begin="${1:-$(date +%s)}"
    local timezone="${2:-UTC}"

    local dbid instance_number timestamp_begin

               dbid="$($BASHLETS_NAMESPACE database get_dbid)"
    instance_number="$($BASHLETS_NAMESPACE database get_instance_number)"
    timestamp_begin="$($BASHLETS_NAMESPACE datetime from_unixts "$unixts_begin" "$timezone")"

    local query="
        SELECT snap_id FROM (
            SELECT snap_id FROM sys.dba_hist_snapshot
            WHERE
                dbid = $dbid
                AND instance_number = $instance_number
                AND begin_interval_time >
                    GREATEST(startup_time, TIMESTAMP '$timestamp_begin')
            ORDER BY begin_interval_time ASC
        ) WHERE rownum <= 1
    "

    $BASHLETS_NAMESPACE query execute "$query"
}

#@public
function bashlets::rdbms::oracle::awr::get_snap_id_end_by_unixts()
{
    local unixts_begin="${1:-$(date +%s)}"
    local timezone="${2:-UTC}"

    local dbid instance_number timestamp_end

               dbid="$($BASHLETS_NAMESPACE database get_dbid)"
    instance_number="$($BASHLETS_NAMESPACE database get_instance_number)"
      timestamp_end="$($BASHLETS_NAMESPACE datetime from_unixts "$unixts_end" "$timezone")"

    local query="
        SELECT snap_id FROM (
            SELECT snap_id FROM sys.dba_hist_snapshot
            WHERE
                dbid = $dbid
                AND instance_number = $instance_number
                AND startup_time < begin_interval_time
                AND end_interval_time > TIMESTAMP '$timestamp_end'
            ORDER BY begin_interval_time DESC
        ) WHERE rownum <= 1
    "

    $BASHLETS_NAMESPACE query execute "$query"
}

#@public
function bashlets::rdbms::oracle::awr::report_by_interval_of_unixts()
{
    local tsinterval="$1"
    local timezone="${2:-UTC}"
    local options=${3:-0}

    local unixts_begin="$($BASHLETS_NAMESPACE tsinterval get_t0 "$tsinterval")"
    local   unixts_end="$($BASHLETS_NAMESPACE tsinterval get_t1 "$tsinterval")"

    local            dbid=$($BASHLETS_NAMESPACE database get_dbid)
    local instance_number=$($BASHLETS_NAMESPACE database get_instance_number)

    local snap_id_begin snap_id_end query

    $BASHLETS_NAMESPACE database is_primary || {
        echo "Database is non-primary!"
        return 3
    }

    snap_id_begin=$(bashlets::rdbms::oracle::awr::get_snap_id_begin_by_unixts   \
        "$unixts_begin" "$timezone")

    snap_id_end=$(bashlets::rdbms::oracle::awr::get_snap_id_end_by_unixts       \
        "$unixts_end" "$timezone")

    [[ -z $snap_id_begin || -z $snap_id_end ]] && return

    query="
        SELECT t.output
            FROM TABLE(
                DBMS_WORKLOAD_REPOSITORY.AWR_REPORT_TEXT(
                    $dbid,
                    $instance_number,
                    $snap_id_begin,
                    $snap_id_end,
                    $options
                )
            ) t
    "

    $BASHLETS_NAMESPACE query execute "$query"  \
        | expand  # convert tabs to spaces in output
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
